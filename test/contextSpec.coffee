define ['context', 'utils'], (Context, u) ->
  describe 'Context', ->
    subject = undefined

    describe 'constructor', ->
      it 'should be defined', ->
        expect(Context).toBeDefined()

    describe 'constructed Contex', ->
      name           =
      CurrentContext =
      ContextFactory =
      PrivateContext = undefined

      beforeEach ->
        subject        = new Context()
        PrivateContext = {}
        ContextFactory = ->
          @is = -> 'from Factory'
          this

      it 'should respond to defineProperty', ->
        expect(subject.defineProperty).toBeDefined()
        expect(subject.defineProperty).toBeAFunction()

      it 'should respond to properties', ->
        expect(subject.properties).toBeDefined()
        expect(subject.properties).toBeAnObject()

      describe '#defineProperty', ->

        describe 'with argument', ->

          beforeEach ->
            name           = 'test'
            CurrentContext = new Context(PrivateContext, ContextFactory)
            subject        = CurrentContext.defineProperty(name)

          it 'should return true if ok', ->
            expect(subject).toBeTruthy()

          it 'should affect PrivateContext', ->
            expect(u(PrivateContext).keys()).toEqual ['test']

          it 'should PrivateContext should be generated by ContextFactory', ->
            expect(PrivateContext[name]()).toBeAnObject()
            expect(PrivateContext[name]().is.toString()).toMatch /from Factory/

        describe 'without arguments', ->

          beforeEach ->
            CurrentContext = new Context(PrivateContext, ContextFactory)
            subject        = CurrentContext.defineProperty()

          it 'should return false if property not present', ->
            expect(subject).toBeFalsy()

          it 'should not affect PrivateContext', ->
            expect(u(PrivateContext).keys()).toEqual []

      describe '#properties', ->
        describe 'with affected PrivateContext', ->

          beforeEach ->
            name           = 'test'
            CurrentContext = new Context(PrivateContext, ContextFactory)
            subject        = CurrentContext.properties

          it 'should contain all defined properties', ->
            expect(subject).not.toHaveProperties()
            CurrentContext.defineProperty(name)
            expect(subject).toHaveProperties ["#{name}"]

          it 'properties should be well defined', ->
            CurrentContext.defineProperty(name)
            expect(subject[name]).toBeAFunction()

        describe 'with empty PrivateContext', ->
          xit 'pending', ->
