define ['context', 'utils'], (Context, u) ->
  fdescribe 'Context', ->
    subject = undefined

    describe 'constructor', ->
      it 'should be defined', ->
        expect(Context).toBeDefined()

    describe 'constructed Contex', ->
      beforeEach ->
        subject = new Context()

      it 'should respond to defineProperty', ->
        expect(subject.defineProperty).toBeDefined()
        expect(typeof(subject.defineProperty)).toBe 'function'

      it 'should respond to properties', ->
        expect(subject.properties).toBeDefined()
        expect(typeof(subject.properties)).toBe 'object'

      describe '#defineProperty', ->
        name           =
        CurrentContext =
        ContextFactory =
        PrivateContext = undefined

        beforeEach ->
          ContextFactory = ->
            @is = -> 'from Factory'
            this

          PrivateContext = {}

        describe 'with argument', ->

          beforeEach ->
            name           = 'test'
            CurrentContext = new Context(ContextFactory, PrivateContext)
            subject        = CurrentContext.defineProperty(name)

          it 'should return true if ok', ->
            expect(subject).toBeTruthy()

          it 'should affect PrivateContext', ->
            expect(u(PrivateContext).keys()).toEqual ['test']

          it 'should PrivateContext should be generated by ContextFactory', ->
            expect(typeof(PrivateContext[name]())).toBe 'object'
            expect(PrivateContext[name]().is.toString()).toMatch /from Factory/

        describe 'without arguments', ->

          beforeEach ->
            CurrentContext = new Context(ContextFactory, PrivateContext)
            subject        = CurrentContext.defineProperty()

          it 'should return false if property not present', ->
            expect(subject).toBeFalsy()

          it 'should not affect PrivateContext', ->
            expect(u(PrivateContext).keys()).toEqual []

      describe '#properties', ->
        describe 'with affected PrivateContext', ->
          xit 'pending', ->

        describe 'with empty PrivateContext', ->
          xit 'pending', ->
