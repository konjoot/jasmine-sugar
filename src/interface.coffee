define 'interface', ->
  (Jasmine, Wrapper)->
    return {} unless Jasmine
    return {} unless Wrapper

    currentContext  =
    currentCallback = undefined

    # @set = ->
      # try
      #   callback.apply(this)
      # catch e
      #   switch e.name
      #     when 'ReferenceError'
      #       newCallback = new CallbackWrapper(callback)
      #       newCallback.apply(this)

    @set = (callback)->
      currentCallback = callback
      currentContext  = this

      runCallback().with preparedContext()

    runCallback = ->
      with: (context)->
        currentCallback.apply context
        context.clear()

    preparedContext = ->
      for prop in callbackProperties()
        defineProperty prop

    defineProperty = (prop)->
      currentContext[prop] =
        letBe: (fn)->


    autoGeneratedMethods = ['it', 'iit', 'fit', 'xit']

    for method in autoGeneratedMethods
      if Jasmine.hasOwnProperty(method) and typeof(Jasmine[method]) == 'function'
        this[method] = do (method = method)->
          ->
            Jasmine[method].apply(this,
              Wrapper(arguments...).it())

    # genarating the following functions:
    # @it = ()->
    #   Jasmine.it.apply(
    #     this,
    #     Wrapper(arguments...).it()
    #   )

    # @iit = ()->
    #   Jasmine.iit.apply(
    #     this,
    #     Wrapper(arguments...).it()
    #   )

    # @fit = ()->
    #   Jasmine.fit.apply(
    #     this,
    #     Wrapper(arguments...).it()
    #   )

    # @xit = ()->
    #   Jasmine.xit.apply(
    #     this,
    #     Wrapper(arguments...).it()
    #   )

    this